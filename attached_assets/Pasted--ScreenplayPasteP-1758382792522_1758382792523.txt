// ============================================================================
// ScreenplayPasteProcessor.ts
// وحدة مستقلة لمعالجة النصوص الملصوقة وتنسيقها حسب المواصفات القياسية للسيناريو
// تعتمد على: ScreenplayCoordinator + وكلاء التنسيق
// ============================================================================

import { ScreenplayCoordinator } from "./ScreenplayCoordinator";
import { getFormatStyles } from "./formatStyles"; // دالة أنماط التنسيق القياسية
import { AgentContext } from "./types";

// تعريف Block
export interface ScreenplayBlock {
  type:
    | "scene-header-1"
    | "scene-header-2"
    | "scene-header-3"
    | "numbered-scene"
    | "character"
    | "dialogue"
    | "parenthetical"
    | "action"
    | "transition"
    | "director-note"
    | "location-header";
  text: string;
  html: string;
  agent: string;
  confidence: number;
}

export class ScreenplayPasteProcessor {
  private coordinator: ScreenplayCoordinator;

  constructor() {
    this.coordinator = new ScreenplayCoordinator(getFormatStyles);
  }

  /**
   * دالة رئيسية: تعالج عملية اللصق
   */
  public async processPaste(e: ClipboardEvent): Promise<void> {
    e.preventDefault();
    const rawText = e.clipboardData?.getData("text/plain");
    if (!rawText) return;

    const lines = rawText.split(/\r?\n/).filter((l) => l.trim() !== "");
    const context: AgentContext = {};

    let currentPage = this.createPage();
    let pageContentHeight = 0;

    for (const line of lines) {
      const res = this.coordinator.processLine(line, context);

      const block = document.createElement("div");
      block.innerHTML = res.html;

      // تطبيق القواعد التنسيقية حسب النوع
      this.applyFormattingRules(block, res.elementType);

      currentPage.appendChild(block);
      pageContentHeight += block.offsetHeight;

      // لو الصفحة امتلأت -> أنشئ صفحة جديدة
      if (pageContentHeight >= currentPage.clientHeight) {
        document.body.appendChild(currentPage);
        currentPage = this.createPage();
        pageContentHeight = 0;
      }
    }

    document.body.appendChild(currentPage);
  }

  /**
   * إنشاء صفحة جديدة A4 بالهوامش القياسية
   */
  private createPage(): HTMLDivElement {
    const page = document.createElement("div");
    page.className = "script-page";
    Object.assign(page.style, {
      width: "210mm", // A4
      minHeight: "297mm",
      margin: "0 auto",
      padding: "1in 1in 1in 1.5in", // top=1in, right=1in, bottom=1in, left=1.5in
      boxSizing: "border-box",
      border: "1px solid #ddd",
    });
    return page;
  }

  /**
   * قواعد التنسيق حسب النوع
   */
  private applyFormattingRules(block: HTMLElement, type: string) {
    switch (type) {
      case "scene-header-1":
      case "scene-header-2":
        Object.assign(block.style, {
          display: "flex",
          justifyContent: "space-between",
        });
        break;

      case "scene-header-3":
        Object.assign(block.style, { textAlign: "center", fontWeight: "bold" });
        break;

      case "action":
        Object.assign(block.style, {
          textAlign: "right",
          margin: "0.5em 1in 0.5em 1.5in",
        });
        break;

      case "character":
      case "dialogue":
      case "parenthetical":
        Object.assign(block.style, {
          textAlign: "center",
          margin: "0 1.5in",
        });
        break;

      case "transition":
        Object.assign(block.style, {
          textAlign: "center",
          fontWeight: "bold",
          textTransform: "uppercase",
        });
        break;

      case "director-note":
        Object.assign(block.style, {
          fontStyle: "italic",
          fontSize: "0.9em",
          color: "#666",
          backgroundColor: "#f5f5f5",
          border: "1px solid #ddd",
          borderRadius: "3px",
          padding: "2px 4px",
        });
        break;
    }
  }
}
